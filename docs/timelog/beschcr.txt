BEFORE BREAK:
I don't remember when I did all of this, but here's the work I remember doing recently.

Researching what technologies we would need - 2 hours
Learning HTML and CSS - 3 hours
Learning JS/Node - 3 hours
Coding really small sample project just to make sure I understand
how the project needs to be structured - 2 hours
Gantt Chart - 1 hour
Determining project structure - 2 hours


We agreed not to work on the project over spring break.


3/25:
Group Meeting (1 hr)
HTML/CSS practice webpage (.5 hr)
 
3/27:
More JS tutorials (2 hr)

3/28:
Learning how WebSockets work/how to do basic website request handling (1.5 hr)
Working on sample site because I'm supposed to wait for my groupmates to post thier things so I can work on mine (2.5 hr)

4/6:
Learning React.js (1 hr)
Trying to understand the code teammates uploaded (1 hr)

(I didn't do much this week because I was still supposed to wait for the team to do the poker logic and UI.
My role was decided to be to get these two things to work together and with actual internet connections, and
that stuff was just submitted today (4/6.) I learned and practiced the stuff I knew I would need and then didn't
know what else to do, so I'll just work more on it this week. Although they did not end up using the project 
structure in the design doc so I think my role will be a little more undefined and chaotic than I had expected.)

4/7:
2 hrs: Reading through code, learning React (In understanding the codebase I know that I did not learn all that I needed), deciding what to do
.5 hrs: Working on server state (ended up being GameState.js)

4/8:
2 hrs: I reviewed React docs and common practices and decided this is what needs to be done/how I want to do it:
The server needs to be able to manage multiple games, so each game will have a GameState. Player specific info
will be stored in a Player object.
Somehow the GameState and Player objects will need to be stored and able to be accessed by components. I haven't
decided how to do this.
The Seat component will represent/render a player (i.e. a seat at the table.) There will be 8 per table.
I've looked into React's Context API for storing some of this state and it will be helpful but some will
need to be stored on the server so that the data syncs for all players (and cant be edited in the browser.)
To update for actions that other players take, browsers will need to update in response to the server instead
of only user input. I found some sources on how to do this but it is for later.
2.5 hrs: Writing the Seat component. Also testing it and it doesn't work, so debugging for a bit.

4/9: 
1 hr: I fixed the Seat component and am about to commit. I did a bunch of stuff wrong, but now I feel a lot
more comfortable writing components.
1 hr: Working on where to store state. Started looking at ExpressJS.

4/10:
4 hrs: I started the ExpressJS backend. I added UI for choosing which game to play based on a game code. I made an API that the UI can call for user actions and started calling it for button pushes. I also outlined some methods I would need from Logic.js.

4/15:
2.5 hrs: I did some work on the Server API and connection it to the buttons in the UI. I started looking into how to implement
dynamic updates of the client copies of game state, because React can only re-render in response to user input and not external
changes. I looked at SSE.

4/16: 2 hrs: I learned how to use SSE and implemented it as far as I can while I'm waiting for Jason to finish his game logic stuff.
Right now there's a check happening every half second. I hope to remove the need for that but I don't know how to wait for an event
started in a different function, which is what would need to happen because I would need to be recieving these state updates in my
SSE endpoint.

4/18:
3 hrs: With Jason's API-ified game logic, I was able to finally connect the server to the game logic with only a few changes to the latter. It doesn't work, though, and god only knows why. I will keep trying.

4/20:
2 hrs: I found the fix to the bug. The problem ended up being that my SSE requests were supposed to be POST but I was using GET.
I also had to merge some changes since I was working on an old branch but it didn't end up being a huge deal.

4/21:
3.5 hrs: I tested and debugged the communication between the browser and server until it demonstrably worked. There were a lot of small things I got wrong (mostly in the files Backend/Logic.js, server/index.js, and components/Home.js if I remember correctly.)

4/22:
3 hrs: I worked on the player display (Game.js/Seat.js) and the game progression. So far, the server responds to player requests to draw, call, or fold, but not in an order that makes sense. In poker, each player does one of those options when it's thier turn only, and in a series of betting rounds in which more information about the community cards are revealed each time. There needs to be logic that makes things happen in the order they're supposed to in poker and that's what I'm working on.
3 hrs: I worked more on the order of poker logic described above, got the cards to actually render based on what they're supposed to be/which players are supposed to know them, and tried to make the Seat CSS a little more sane.
1 hr: I was testing previous changes and found a bug where betting would change the value of the pot and the player's chips to weird, very large values. I fixed it. It ended up being because the number in the Bet box, and in the resulting request to the server, was a string, and in javascript if you have a plus sign with a string and a number it implicitly changes the number to a string and treats it as string addition. Which is why 10 + 3 was 103.


5/1: I realized today I haven't updated my changes to the log in a bit. Doing that now.

5/2:
.5 hrs: I fixed a bug introduced in one of the more recent updates where players were considered by the server to have taken thier turns even though they hadn't. It was because the hasActed variable was not getting set in the correct place. (This was all in Logic.js)
4.5 hrs: I fixed (I think) the bug that made the game not work with 3+ players. I honestly don't know what it was. I think it might have been some sort of race condition with the SSE updates so I stopped doing those and implemented a more rudimentary update system. It works, and it got rid of the problem, and at this point I don't really care why. (This was in Backend/Logic.js, components/Game.js, components/Home.js, and server/index.js.)

5/3:
1 hr: I merged Cody's UI changes and mine from my last log thing.
